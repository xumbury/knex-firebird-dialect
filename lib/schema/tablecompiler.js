"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _tablecompiler = _interopRequireDefault(require("knex/lib/schema/tablecompiler"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// Table Compiler
// -------
var TableCompiler_Firebird = /*#__PURE__*/function (_TableCompiler) {
  (0, _inherits2["default"])(TableCompiler_Firebird, _TableCompiler);
  var _super = _createSuper(TableCompiler_Firebird);
  function TableCompiler_Firebird() {
    (0, _classCallCheck2["default"])(this, TableCompiler_Firebird);
    return _super.apply(this, arguments);
  }
  (0, _createClass2["default"])(TableCompiler_Firebird, [{
    key: "createQuery",
    value:
    // Create a new table.
    function createQuery(columns, ifNot) {
      if (ifNot) throw new Error("createQuery ifNot not implemented");
      var createStatement = "create table ";
      var sql = createStatement + this.tableName() + " (" + columns.sql.join(", ") + ")";
      this.pushQuery(sql);
    }

    // Compile a plain index key command.
  }, {
    key: "index",
    value: function index(columns, indexName) {
      indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand("index", this.tableNameRaw, columns);
      this.pushQuery("create index ".concat(indexName, " on ").concat(this.tableName(), " (").concat(this.formatter.columnize(columns), ")"));
    }
  }, {
    key: "primary",
    value: function primary(columns) {
      this.constraintName = this.constraintName ? this.formatter.wrap(this.constraintName) : this.formatter.wrap("".concat(this.tableNameRaw, "_pkey"));
      this.pushQuery("alter table ".concat(this.tableName(), " add constraint ").concat(this.constraintName, " primary key (").concat(this.formatter.columnize(columns), ")"));
    }
  }, {
    key: "renameColumn",
    value: function renameColumn(from, to) {
      var fromSanitized = this.formatter.wrap(from);
      var toSanitized = this.formatter.wrap(to);
      this.pushQuery({
        sql: "alter table ".concat(this.tableName(), " ").concat(this.alterColumnPrefix, " ").concat(fromSanitized, " to ").concat(toSanitized)
      });
    }
  }]);
  return TableCompiler_Firebird;
}(_tablecompiler["default"]);
TableCompiler_Firebird.prototype.addColumnsPrefix = 'ADD ';
TableCompiler_Firebird.prototype.dropColumnPrefix = 'DROP ';
TableCompiler_Firebird.prototype.alterColumnPrefix = 'ALTER COLUMN ';
var _default = TableCompiler_Firebird;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGFibGVjb21waWxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZjIiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsImUiLCJUYWJsZUNvbXBpbGVyX0ZpcmViaXJkIiwiX1RhYmxlQ29tcGlsZXIiLCJfaW5oZXJpdHMyIiwiX3N1cGVyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImNyZWF0ZVF1ZXJ5IiwiY29sdW1ucyIsImlmTm90IiwiRXJyb3IiLCJjcmVhdGVTdGF0ZW1lbnQiLCJzcWwiLCJ0YWJsZU5hbWUiLCJqb2luIiwicHVzaFF1ZXJ5IiwiaW5kZXgiLCJpbmRleE5hbWUiLCJmb3JtYXR0ZXIiLCJ3cmFwIiwiX2luZGV4Q29tbWFuZCIsInRhYmxlTmFtZVJhdyIsImNvbmNhdCIsImNvbHVtbml6ZSIsInByaW1hcnkiLCJjb25zdHJhaW50TmFtZSIsInJlbmFtZUNvbHVtbiIsImZyb20iLCJ0byIsImZyb21TYW5pdGl6ZWQiLCJ0b1Nhbml0aXplZCIsImFsdGVyQ29sdW1uUHJlZml4IiwiVGFibGVDb21waWxlciIsImFkZENvbHVtbnNQcmVmaXgiLCJkcm9wQ29sdW1uUHJlZml4IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjaGVtYS90YWJsZWNvbXBpbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUYWJsZUNvbXBpbGVyIGZyb20gXCJrbmV4L2xpYi9zY2hlbWEvdGFibGVjb21waWxlclwiO1xuXG4vLyBUYWJsZSBDb21waWxlclxuLy8gLS0tLS0tLVxuXG5jbGFzcyBUYWJsZUNvbXBpbGVyX0ZpcmViaXJkIGV4dGVuZHMgVGFibGVDb21waWxlciB7XG4gIC8vIENyZWF0ZSBhIG5ldyB0YWJsZS5cbiAgY3JlYXRlUXVlcnkoY29sdW1ucywgaWZOb3QpIHtcbiAgICBpZiAoaWZOb3QpIHRocm93IG5ldyBFcnJvcihcImNyZWF0ZVF1ZXJ5IGlmTm90IG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICBjb25zdCBjcmVhdGVTdGF0ZW1lbnQgPSBcImNyZWF0ZSB0YWJsZSBcIjtcbiAgICBsZXQgc3FsID1cbiAgICAgIGNyZWF0ZVN0YXRlbWVudCArIHRoaXMudGFibGVOYW1lKCkgKyBcIiAoXCIgKyBjb2x1bW5zLnNxbC5qb2luKFwiLCBcIikgKyBcIilcIjtcbiAgICB0aGlzLnB1c2hRdWVyeShzcWwpO1xuICB9XG5cbiAgLy8gQ29tcGlsZSBhIHBsYWluIGluZGV4IGtleSBjb21tYW5kLlxuICBpbmRleChjb2x1bW5zLCBpbmRleE5hbWUpIHtcbiAgICBpbmRleE5hbWUgPSBpbmRleE5hbWVcbiAgICAgID8gdGhpcy5mb3JtYXR0ZXIud3JhcChpbmRleE5hbWUpXG4gICAgICA6IHRoaXMuX2luZGV4Q29tbWFuZChcImluZGV4XCIsIHRoaXMudGFibGVOYW1lUmF3LCBjb2x1bW5zKTtcbiAgICB0aGlzLnB1c2hRdWVyeShcbiAgICAgIGBjcmVhdGUgaW5kZXggJHtpbmRleE5hbWV9IG9uICR7dGhpcy50YWJsZU5hbWUoKX0gKCR7dGhpcy5mb3JtYXR0ZXIuY29sdW1uaXplKFxuICAgICAgICBjb2x1bW5zXG4gICAgICApfSlgXG4gICAgKTtcbiAgfVxuXG4gIHByaW1hcnkoY29sdW1ucykge1xuICAgIHRoaXMuY29uc3RyYWludE5hbWUgPSB0aGlzLmNvbnN0cmFpbnROYW1lXG4gICAgICA/IHRoaXMuZm9ybWF0dGVyLndyYXAodGhpcy5jb25zdHJhaW50TmFtZSlcbiAgICAgIDogdGhpcy5mb3JtYXR0ZXIud3JhcChgJHt0aGlzLnRhYmxlTmFtZVJhd31fcGtleWApO1xuICAgIHRoaXMucHVzaFF1ZXJ5KFxuICAgICAgYGFsdGVyIHRhYmxlICR7dGhpcy50YWJsZU5hbWUoKX0gYWRkIGNvbnN0cmFpbnQgJHtcbiAgICAgICAgdGhpcy5jb25zdHJhaW50TmFtZVxuICAgICAgfSBwcmltYXJ5IGtleSAoJHt0aGlzLmZvcm1hdHRlci5jb2x1bW5pemUoY29sdW1ucyl9KWBcbiAgICApO1xuICB9XG5cbiAgcmVuYW1lQ29sdW1uKGZyb20sIHRvKSB7XG4gICAgY29uc3QgZnJvbVNhbml0aXplZCA9IHRoaXMuZm9ybWF0dGVyLndyYXAoZnJvbSlcbiAgICBjb25zdCB0b1Nhbml0aXplZCA9IHRoaXMuZm9ybWF0dGVyLndyYXAodG8pXG5cbiAgICB0aGlzLnB1c2hRdWVyeSh7XG4gICAgICBzcWw6IGBhbHRlciB0YWJsZSAke3RoaXMudGFibGVOYW1lKCl9ICR7dGhpcy5hbHRlckNvbHVtblByZWZpeH0gJHtmcm9tU2FuaXRpemVkfSB0byAke3RvU2FuaXRpemVkfWAsXG4gICAgfSk7XG4gIH1cbn1cblxuVGFibGVDb21waWxlcl9GaXJlYmlyZC5wcm90b3R5cGUuYWRkQ29sdW1uc1ByZWZpeCA9ICdBREQgJztcblRhYmxlQ29tcGlsZXJfRmlyZWJpcmQucHJvdG90eXBlLmRyb3BDb2x1bW5QcmVmaXggPSAnRFJPUCAnO1xuVGFibGVDb21waWxlcl9GaXJlYmlyZC5wcm90b3R5cGUuYWx0ZXJDb2x1bW5QcmVmaXggPSAnQUxURVIgQ09MVU1OICc7XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29tcGlsZXJfRmlyZWJpcmQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwRCxTQUFBQyxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxRQUFBQyxLQUFBLE9BQUFDLGdCQUFBLGFBQUFMLE9BQUEsR0FBQU0sTUFBQSxNQUFBTCx5QkFBQSxRQUFBTSxTQUFBLE9BQUFGLGdCQUFBLG1CQUFBRyxXQUFBLEVBQUFGLE1BQUEsR0FBQUcsT0FBQSxDQUFBQyxTQUFBLENBQUFOLEtBQUEsRUFBQU8sU0FBQSxFQUFBSixTQUFBLFlBQUFELE1BQUEsR0FBQUYsS0FBQSxDQUFBUSxLQUFBLE9BQUFELFNBQUEsZ0JBQUFFLDJCQUFBLG1CQUFBUCxNQUFBO0FBQUEsU0FBQUosMEJBQUEsZUFBQU8sT0FBQSxxQkFBQUEsT0FBQSxDQUFBQyxTQUFBLG9CQUFBRCxPQUFBLENBQUFDLFNBQUEsQ0FBQUksSUFBQSwyQkFBQUMsS0FBQSxvQ0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQUFBVixPQUFBLENBQUFDLFNBQUEsQ0FBQU0sT0FBQSw4Q0FBQUksQ0FBQTtBQUUxRDtBQUNBO0FBQUEsSUFFTUMsc0JBQXNCLDBCQUFBQyxjQUFBO0VBQUEsSUFBQUMsVUFBQSxhQUFBRixzQkFBQSxFQUFBQyxjQUFBO0VBQUEsSUFBQUUsTUFBQSxHQUFBekIsWUFBQSxDQUFBc0Isc0JBQUE7RUFBQSxTQUFBQSx1QkFBQTtJQUFBLElBQUFJLGdCQUFBLG1CQUFBSixzQkFBQTtJQUFBLE9BQUFHLE1BQUEsQ0FBQVosS0FBQSxPQUFBRCxTQUFBO0VBQUE7RUFBQSxJQUFBZSxhQUFBLGFBQUFMLHNCQUFBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQTtJQUMxQjtJQUNBLFNBQUFDLFlBQVlDLE9BQU8sRUFBRUMsS0FBSyxFQUFFO01BQzFCLElBQUlBLEtBQUssRUFBRSxNQUFNLElBQUlDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQztNQUMvRCxJQUFNQyxlQUFlLEdBQUcsZUFBZTtNQUN2QyxJQUFJQyxHQUFHLEdBQ0xELGVBQWUsR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHTCxPQUFPLENBQUNJLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUc7TUFDMUUsSUFBSSxDQUFDQyxTQUFTLENBQUNILEdBQUcsQ0FBQztJQUNyQjs7SUFFQTtFQUFBO0lBQUFQLEdBQUE7SUFBQUMsS0FBQSxFQUNBLFNBQUFVLE1BQU1SLE9BQU8sRUFBRVMsU0FBUyxFQUFFO01BQ3hCQSxTQUFTLEdBQUdBLFNBQVMsR0FDakIsSUFBSSxDQUFDQyxTQUFTLENBQUNDLElBQUksQ0FBQ0YsU0FBUyxDQUFDLEdBQzlCLElBQUksQ0FBQ0csYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNDLFlBQVksRUFBRWIsT0FBTyxDQUFDO01BQzNELElBQUksQ0FBQ08sU0FBUyxpQkFBQU8sTUFBQSxDQUNJTCxTQUFTLFVBQUFLLE1BQUEsQ0FBTyxJQUFJLENBQUNULFNBQVMsQ0FBQyxDQUFDLFFBQUFTLE1BQUEsQ0FBSyxJQUFJLENBQUNKLFNBQVMsQ0FBQ0ssU0FBUyxDQUMzRWYsT0FDRixDQUFDLE1BQ0gsQ0FBQztJQUNIO0VBQUM7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQWtCLFFBQVFoQixPQUFPLEVBQUU7TUFDZixJQUFJLENBQUNpQixjQUFjLEdBQUcsSUFBSSxDQUFDQSxjQUFjLEdBQ3JDLElBQUksQ0FBQ1AsU0FBUyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDTSxjQUFjLENBQUMsR0FDeEMsSUFBSSxDQUFDUCxTQUFTLENBQUNDLElBQUksSUFBQUcsTUFBQSxDQUFJLElBQUksQ0FBQ0QsWUFBWSxVQUFPLENBQUM7TUFDcEQsSUFBSSxDQUFDTixTQUFTLGdCQUFBTyxNQUFBLENBQ0csSUFBSSxDQUFDVCxTQUFTLENBQUMsQ0FBQyxzQkFBQVMsTUFBQSxDQUM3QixJQUFJLENBQUNHLGNBQWMsb0JBQUFILE1BQUEsQ0FDSixJQUFJLENBQUNKLFNBQVMsQ0FBQ0ssU0FBUyxDQUFDZixPQUFPLENBQUMsTUFDcEQsQ0FBQztJQUNIO0VBQUM7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQW9CLGFBQWFDLElBQUksRUFBRUMsRUFBRSxFQUFFO01BQ3JCLElBQU1DLGFBQWEsR0FBRyxJQUFJLENBQUNYLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDUSxJQUFJLENBQUM7TUFDL0MsSUFBTUcsV0FBVyxHQUFHLElBQUksQ0FBQ1osU0FBUyxDQUFDQyxJQUFJLENBQUNTLEVBQUUsQ0FBQztNQUUzQyxJQUFJLENBQUNiLFNBQVMsQ0FBQztRQUNiSCxHQUFHLGlCQUFBVSxNQUFBLENBQWlCLElBQUksQ0FBQ1QsU0FBUyxDQUFDLENBQUMsT0FBQVMsTUFBQSxDQUFJLElBQUksQ0FBQ1MsaUJBQWlCLE9BQUFULE1BQUEsQ0FBSU8sYUFBYSxVQUFBUCxNQUFBLENBQU9RLFdBQVc7TUFDbkcsQ0FBQyxDQUFDO0lBQ0o7RUFBQztFQUFBLE9BQUEvQixzQkFBQTtBQUFBLEVBeENrQ2lDLHlCQUFhO0FBMkNsRGpDLHNCQUFzQixDQUFDSixTQUFTLENBQUNzQyxnQkFBZ0IsR0FBRyxNQUFNO0FBQzFEbEMsc0JBQXNCLENBQUNKLFNBQVMsQ0FBQ3VDLGdCQUFnQixHQUFHLE9BQU87QUFDM0RuQyxzQkFBc0IsQ0FBQ0osU0FBUyxDQUFDb0MsaUJBQWlCLEdBQUcsZUFBZTtBQUFDLElBQUFJLFFBQUEsR0FFdERwQyxzQkFBc0I7QUFBQXFDLE9BQUEsY0FBQUQsUUFBQSJ9